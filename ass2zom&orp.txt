// zom
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void sort(int *arr, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of integers: ");
    scanf("%d", &n);
    
    int *arr = (int *)malloc(n * sizeof(int));
    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {  // Child process
        printf("Child process (PID: %d) is waiting...\n", getpid());
        sleep(2);  // Simulating work
        printf("Child process (PID: %d) exiting...\n", getpid());
        exit(0);  // This shows zombie state
    } else {  // Parent process
        printf("Parent process (PID: %d) sorting the array...\n", getpid());
        sort(arr, n);
        printf("Sorted integers in parent process:\n");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");

        // Parent exits without waiting for the child
        printf("Parent process (PID: %d) exiting...\n", getpid());
        exit(0);  // Uncommented to demonstrate zombie state
    }

    free(arr);
    return 0;
}


//orp
else {  // Parent process
        printf("Parent process (PID: %d) exiting immediately...\n", getpid());
        exit(0);  // Parent exits immediately, making the child an orphan
    }
