// proc1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

#define PIPE1 "pipe1"
#define PIPE2 "pipe2"

int main() {
    char input[1024];
    char output[1024];
    int fd1, fd2;

    // Create FIFOs if they donâ€™t exist
    mkfifo(PIPE1, 0666);
    mkfifo(PIPE2, 0666);

    while (1) {
        // Get sentence from user
        printf("Enter a sentence: ");
        fgets(input, sizeof(input), stdin);

        // Write input to PIPE1
        fd1 = open(PIPE1, O_WRONLY);
        write(fd1, input, strlen(input) + 1);
        close(fd1);

        // Read processed data from PIPE2
        fd2 = open(PIPE2, O_RDONLY);
        read(fd2, output, sizeof(output));
        close(fd2);

        printf("Processed Output:\n%s\n", output);
    }

    return 0;
}


//proc2

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

#define PIPE1 "pipe1"
#define PIPE2 "pipe2"
#define OUTPUT_FILE "output.txt"

void count_text(const char *text, int *char_count, int *word_count, int *line_count) {
    *char_count = *word_count = *line_count = 0;
    int in_word = 0;

    for (int i = 0; text[i] != '\0'; i++) {
        (*char_count)++;
        if (text[i] == ' ' || text[i] == '\n' || text[i] == '\t') {
            in_word = 0;
        } else if (!in_word) {
            in_word = 1;
            (*word_count)++;
        }
        if (text[i] == '\n') {
            (*line_count)++;
        }
    }
}

int main() {
    char input[1024];
    char result[1024];
    int fd1, fd2;

    mkfifo(PIPE1, 0666);
    mkfifo(PIPE2, 0666);

    while (1) {
        // Read input from PIPE1
        fd1 = open(PIPE1, O_RDONLY);
        read(fd1, input, sizeof(input));
        close(fd1);

        int char_count, word_count, line_count;
        count_text(input, &char_count, &word_count, &line_count);

        // Write analysis to file
        FILE *file = fopen(OUTPUT_FILE, "w");
        fprintf(file, "Characters: %d\nWords: %d\nLines: %d\n", char_count, word_count, line_count);
        fclose(file);

        // Read file content into result buffer
        file = fopen(OUTPUT_FILE, "r");
        fread(result, 1, sizeof(result), file);
        fclose(file);

        // Send result back via PIPE2
        fd2 = open(PIPE2, O_WRONLY);
        write(fd2, result, strlen(result) + 1);
        close(fd2);
    }

    return 0;
}


//Run process2 in Terminal 1 first.
//Then run process1 in Terminal 2 and follow the prompts.
