#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

// Function to check whether a page exists in a frame
bool search(int key, int fr[], int frame_count) {
    for (int i = 0; i < frame_count; i++) {
        if (fr[i] == key) {
            return true;
        }
    }
    return false;
}

// Function to find the page to be replaced for the optimal page replacement algorithm
int predict(int pg[], int fr[], int pn, int index, int frame_count) {
    int res = -1, farthest = index;
    for (int i = 0; i < frame_count; i++) {
        int j;
        for (j = index; j < pn; j++) {
            if (fr[i] == pg[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == pn) return i; // If a page is never referenced in the future, return it
    }
    return (res == -1) ? 0 : res; // Return the least recently used page
}

// Function to find page faults using the Optimal page replacement algorithm
int optimalPage(int pg[], int pn, int frame_count, int *hits) {
    int *fr = (int *)malloc(frame_count * sizeof(int));
    int hit = 0;
    int count = 0;

    for (int i = 0; i < pn; i++) {
        if (search(pg[i], fr, count)) {
            hit++; // Increment hit count
            continue;
        }
        if (count < frame_count) {
            fr[count++] = pg[i]; // Add page to frames
        } else {
            int j = predict(pg, fr, pn, i + 1, frame_count);
            fr[j] = pg[i]; // Replace the page
        }
    }
    *hits = hit; // Store number of hits
    free(fr);
    return pn - hit; // Return number of page faults
}

// Function to find page faults using the LRU page replacement algorithm
int lruPage(int pages[], int n, int capacity, int *hits) {
    int *fr = (int *)malloc(capacity * sizeof(int));
    int *indexes = (int *)malloc(capacity * sizeof(int));
    int page_faults = 0;
    int frame_count = 0;

    for (int i = 0; i < n; i++) {
        if (search(pages[i], fr, frame_count)) {
            (*hits)++; // Increment hit count
            continue; // Page already in frame
        }

        // If the frame can hold more pages
        if (frame_count < capacity) {
            fr[frame_count++] = pages[i]; // Add page to frames
            page_faults++;
        } else {
            // Need to replace a page
            int lru_index = -1, lru_time = INT_MAX;
            for (int j = 0; j < frame_count; j++) {
                if (indexes[fr[j]] < lru_time) {
                    lru_time = indexes[fr[j]];
                    lru_index = j;
                }
            }
            fr[lru_index] = pages[i]; // Replace the least recently used page
            page_faults++;
        }
        indexes[pages[i]] = i; // Update the page index
    }

    free(fr);
    free(indexes);
    return page_faults; // Return number of page faults
}

// Function to find page faults using the FCFS page replacement algorithm
int fcfsPage(int pages[], int n, int capacity) {
    int *fr = (int *)malloc(capacity * sizeof(int));
    int page_faults = 0;
    int frame_count = 0;

    for (int i = 0; i < n; i++) {
        if (!search(pages[i], fr, frame_count)) {
            if (frame_count < capacity) {
                fr[frame_count++] = pages[i]; // Add page to frames
            } else {
                // Replace the first page in the frame (FCFS)
                fr[i % capacity] = pages[i]; // Replace the page in a circular manner
            }
            page_faults++;
        }
    }
    
    free(fr);
    return page_faults; // Return number of page faults
}

// Main function to test the algorithms
int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 4;

    // Initialize hit counters
    int optimal_hits = 0;
    int lru_hits = 0;

    // Calculate page faults for each algorithm
    int optimal_faults = optimalPage(pages, n, capacity, &optimal_hits);
    int lru_faults = lruPage(pages, n, capacity, &lru_hits);
    int fcfs_faults = fcfsPage(pages, n, capacity);

    // Output results
    printf("FCFS Page Faults: %d\n", fcfs_faults);  // Expected: 8
    printf("Optimal Page Replacement:\n");
    printf("  No. of hits = %d\n", optimal_hits);  // Expected: 7
    printf("  No. of misses = %d\n", optimal_faults);  // Expected: 6
    printf("LRU Page Faults: %d\n", lru_faults);  // Expected: 7

    return 0;
}
